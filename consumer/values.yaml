image:
  docker_repo: "maheshpoojaryneu/csye7125"
  webapp: "webapp-cve-consumer"
  webapp_version: ""
  port: "8080"
  pg_container: "pg-migration"
  pg_container_version: ""


postgres:
  url: "jdbc:postgresql://postgres.consumer:5432/cve"
  dbname: "cve"
  host: "postgres.consumer"
  port: "5432"
  user: ""
  password: ""


broker: "kafka-broker-0-external.kafka-ns.svc.cluster.local:9094"

dockerconfigjson: "{}"

# ip: 172.17.0.1
# hostname: "host.docker.internal"

kafkaCheckScript: readiness.sh
liveness_check : liveness.sh

# kafkaCheckScript: '''|
#   #!/bin/sh

#   apt update -y
#   apt install wget
#   apt install default-jdk

#   wget https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz
#   tar -xzf kafka_2.13-3.0.0.tgz

#   BROKER="kafka-broker-0-external.kafka-ns.svc.cluster.local"
#   PORT="9094"
#   TOPIC="push_cve_records"

#   # Check Kafka broker connection
#   if ! telnet $BROKER $PORT </dev/null 2>&1 | grep -q "Connected"; then
#     echo "Unable to connect to Kafka broker at $BROKER:$PORT"
#     exit 1
#   fi

#   # List the topics
#   TOPICS=$(bin/kafka-topics.sh --list --bootstrap-server $BROKER:$PORT)

#   # Check if the specified topic exists in the list
#   echo "$TOPICS" | grep -q "$TOPIC"
#   if [ $? -eq 0 ]; then
#     echo "Topic $TOPIC exists."
#     exit 0
#   else
#     echo "Topic $TOPIC does not exist."
#     exit 1
#   fi

#   apt-get update && apt-get install -y postgresql-client telnet
#   PSQL_HOST="{{ .Values.postgres.host }}"
#   PSQL_PORT="{{ .Values.postgres.port }}"
#   PSQL_USER="{{ .Values.postgres.user }}"
#   PSQL_DB="{{ .Values.postgres.dbname }}"
#   PSQL_PASSWORD="{{ .Values.postgres.password }}"


#   PGPASSWORD=$PSQL_PASSWORD psql -h $PSQL_HOST -U $PSQL_USER -d $PSQL_DB -c '\q'
#   if [ $? -ne 0 ]; then
#     echo "Unable to connect to PostgreSQL database at $PSQL_HOST:$PSQL_PORT"
#     exit 1
#   fi

#   echo "All checks passed successfully."
#   exit 0
#   '''



# image:
#   docker_repo: "maheshpoojaryneu/csye7125"
#   webapp: "webapp-cve-processor"
#   webapp_version: "final"
#   port: "8080"
#   pg_container: "pg-migration"
#   pg_container_version: "final"


# postgres:
#   user: "postgres"
#   password: "postgres"
#   url: "jdbc:postgresql://host.docker.internal:5432/cve"


# imagePullSecrets:
#   name: regcred
