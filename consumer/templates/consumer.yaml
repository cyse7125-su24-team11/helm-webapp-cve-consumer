apiVersion: apps/v1
kind: Deployment
metadata:
  name: cve-consumer
  namespace: consumer
  labels:
    app: cve-consumer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cve-consumer
  template:
    metadata:
      labels:
        app: cve-consumer
    spec:
      affinity:
        # nodeAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #     - weight: 1
        #       preference:
        #         matchExpressions:
        #           - key: topology.kubernetes.io/zone
        #             operator: In
        #             values:
        #               - us-east-1a
        #               - us-east-1b
        #               - us-east-1c
        #               - us-east-1d
        #               - us-east-1e
        #               - us-east-1f
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - cve-consumer
                topologyKey: topology.kubernetes.io/zone
      imagePullSecrets:
      - name: consumercred
      initContainers:
      - name: flyway-init
        image: "{{ .Values.image.docker_repo }}:{{ .Values.image.pg_container }}-{{ .Values.image.pg_container_version }}"
        imagePullPolicy: Always
        command:
        - "/bin/sh"
        - "-c"
        - "flyway -user={{ .Values.postgres.user }} -password={{ .Values.postgres.password }} -url={{ .Values.postgres.url }} migrate"
      containers:
      - name: "{{ .Values.image.webapp }}"
        image: "{{ .Values.image.docker_repo }}:{{ .Values.image.webapp }}-{{ .Values.image.webapp_version }}"
        imagePullPolicy: Always
        env:
        - name: KAFKA_BROKERS
          value: "{{ .Values.broker }}"
        - name: KAFKA_TOPIC
          value: "push_cve_records"
        - name: POSTGRES_DSN
          value: "host={{ .Values.postgres.host }} user={{ .Values.postgres.user }} password={{ .Values.postgres.password }} dbname=cve port=5432 sslmode=disable"
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
          subPath: check_kafka_topic.sh
          readOnly: true
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - /scripts/check_kafka_topic.sh
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
              - /bin/sh             
              - -c
              - ps aux | grep ./webapp-consumer
          initialDelaySeconds: 15  
          periodSeconds: 10       
          timeoutSeconds: 5      
          failureThreshold: 3  
      volumes:
      - name: script-volume
        configMap:
          name: postgres-config
          items:
            - key: check_kafka_topic
              path: check_kafka_topic.sh
