# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: postgres-config
#   namespace: consumer
#   labels:
#     app: postgres-config
# data:
#   POSTGRES_DB: "cve"
#   POSTGRES_USER: "postgres"
#   POSTGRES_PASSWORD: "postgres"
#   PG_DATA: /data
#   host: "postgres.consumer"
#   port: "5432"

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: consumer
  labels:
    app: postgres-config
data:
  POSTGRES_DB: "{{ .Values.postgres.dbname }}"
  POSTGRES_USER: "{{ .Values.postgres.user }}"
  POSTGRES_PASSWORD: "{{ .Values.postgres.password }}"
  PG_DATA: /data
  host: "{{ .Values.postgres.host }}"
  port: "{{ .Values.postgres.port }}"
  check_kafka_topic.sh: |
    #!/bin/sh

    BROKER="kafka-broker-0-external.kafka-ns.svc.cluster.local"
    PORT="9094"
    TOPIC="push_cve_records"

    # Check Kafka broker connection
    if ! telnet $BROKER $PORT </dev/null 2>&1 | grep -q "Connected"; then
      echo "Unable to connect to Kafka broker at $BROKER:$PORT"
      exit 1
    fi

    # List the topics
    TOPICS=$(/opt/app/kafka_2.13-3.0.0/bin/kafka-topics.sh --list --bootstrap-server $BROKER:$PORT)

    # Check if the specified topic exists in the list
    echo "$TOPICS" | grep -q "$TOPIC"
    if [ $? -eq 0 ]; then
      echo "Topic $TOPIC exists."
      # exit 0
    else
      echo "Topic $TOPIC does not exist."
      exit 1
    fi

    # apt-get update && apt-get install -y postgresql-client telnet
    PSQL_HOST="{{ .Values.postgres.host }}"
    PSQL_PORT="{{ .Values.postgres.port }}"
    PSQL_USER="{{ .Values.postgres.user }}"
    PSQL_DB="{{ .Values.postgres.dbname }}"
    PSQL_PASSWORD="{{ .Values.postgres.password }}"

    PGPASSWORD=$PSQL_PASSWORD psql -h $PSQL_HOST -U $PSQL_USER -d $PSQL_DB -c '\q'
    if [ $? -ne 0 ]; then
      echo "Unable to connect to PostgreSQL database at $PSQL_HOST:$PSQL_PORT"
      exit 1
    fi

    echo "All checks passed successfully."
    exit 0


  
# liveness_check: "{{ .Values.liveness_check }}"
